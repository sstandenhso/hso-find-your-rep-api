# Docs for the Azure Web Apps Deploy action: https://github.com/azure/functions-action
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js project to Azure Function App - hso-find-your-rep-api

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.' # set this to the path to your web app project, defaults to the repository root
  # NODE_VERSION: '20.x' # Keep this commented out or remove. Use setup-node instead.

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4

      - name: Setup Node 20.x Environment
        uses: actions/setup-node@v3
        with:
          node-version: '20.x' # Use Node.js 20 LTS for consistency with Azure V4

      - name: 'Install Azure Functions Core Tools'
        run: npm install -g azure-functions-core-tools@4 # Use version 4

      - name: 'Resolve Project Dependencies and Build'
        shell: bash
        run: |
          pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          npm install
          npm run build # Your TypeScript compilation (tsc)
          popd

      - name: 'Package Function App for Deployment'
        shell: bash
        run: |
          pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          # This command creates a functionapp.zip at the root of the package path
          func pack --output ./functionapp.zip --language node --typescript
          popd
        # No need for id: package_step or env, as we're directly uploading the file.

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: function-app-package # Use a consistent and clear artifact name
          path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/functionapp.zip # Upload the generated zip file
          # The path is relative to the workflow's working directory.

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: function-app-package # Must match the 'name' from upload-artifact exactly
          # By default, download-artifact@v4 places the content in a directory with the artifact's name.
          # To place it directly in the current working directory, we use '.' for the path.
          path: . # This ensures the 'functionapp.zip' is downloaded directly into the current job's working directory

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_7D8FCE06FB7645EBA96BA9F751E0BAAE }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_514CC124C6E04EE8BE252B67D072BC54 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_0BC5FB394EFC450BAC2792EF41A7637E }}

      - name: 'Run Azure Functions Action'
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: 'hso-find-your-rep-api'
          slot-name: 'Production'
          # Deploy the pre-packaged zip file, which is now at the root of the working directory
          package: functionapp.zip # This must be the exact name of the zip file generated by func pack
          # Removed Oryx build flags as the package is already built and ready
          # enable-oryx-build: true
          # scm-do-build-during-deployment: true